(in-package :sassetti)

(def-suite sassetti-test :description "Test Suite for Sasetti")
(in-suite sassetti-test)

(test get-as-list 
  (is (equal '(1 "$" NIL "") (get-as-list (parse-amount "$1")) ))
  (is (equal '(1976 11 29) (get-as-list (parse-date "1976/11/29"))))
  (is (equal '("Expenses:Bureaucracy:Add a space" (-359.0 "$" nil "") nil nil "note")
	     (get-as-list (parse-transaction "  Expenses:Bureaucracy:Add a space       $-359.00 ;note"))))
  (is (equal '("Expenses:Bureaucracy:Add a space" nil nil nil "note")
	     (get-as-list (parse-transaction "  Expenses:Bureaucracy:Add a space       ;note"))))
  )

(test string-form
  "Test string-form methods for various objects."
  (is (equal "50 AAPL @ $25" (string-form (parse-amount "50 AAPL @ $25"))))
  (is (equal "150 AAPL @ $2" (string-form (parse-amount "150 AAPL @@ $300"))))
  (is (equal "$350" (string-form (parse-amount "$350"))))

  (is (equal "1975-11-12" (string-form (make-instance 'date :year 1975 :month 11 :day 12))))
  (is (equal "1977-10-01" (string-form (make-instance 'date :year 1977 :month 10 :day 1))))
  (is (equal "1977-04-13" (string-form (make-instance 'date :year 1977 :month 4 :day 13))))
  (is (equal "1975-11-12" (string-form (make-instance 'date :year 1975 :month 11 :day 12))))
  (is (equal "10-01" (string-form (make-instance 'date :year nil :month 10 :day 1))))
  (is (equal "04-13" (string-form (make-instance 'date :year nil :month 4 :day 13))))
  )

(def-suite classes :description "Test the object class definitions" :in sassetti-test)
(in-suite classes)

(test make-date
  (let ((d (make-date 1976 11 29)))
    (is (equal "DATE" (string (type-of d))))
    (is (= 1976 (year d)))
    (is (= 11 (month d)))
    (is (= 29 (day d)))))

(test date
  (let ((d (make-instance 'date :year 1976 :month 11 :day 29)))
    (is (equal "DATE" (string (type-of d))))
    (is (= 1976 (year d)))
    (is (= 11 (month d)))
    (is (= 29 (day d))))
  (let ((d (make-instance 'date :month 11 :day 29)))
    (is (equal "DATE" (string (type-of d))))
    (is (not (year d)))
    (is (= 11 (month d)))
    (is (= 29 (day d)))))

(test amount
  (let ((amt (make-instance 'amount
			    :price 50
			    :denomination "$"
			    :units 25
			    :commodity "AAPL")))
    (is (= 50 (price amt)))
    (is (equal "$" (denomination amt)))
    (is (= 25 (units amt)))
    (is (equal "AAPL" (commodity amt)))))


(def-suite parser :description "Test the ledger file parser" :in sassetti-test)
(in-suite parser)

(test parse-date
  (is (equal '(1976 11 29) (get-as-list (parse-date "1976/11/29"))))
  (is (equal '(NIL 11 29) (get-as-list (parse-date "11/29"))))
  (is (equal '(1976 11 29) (get-as-list (parse-date "1976-11-29"))))
  (is (equal '(NIL 11 29) (get-as-list (parse-date "11-29"))))
  )

(test parse-entry-date
  (multiple-value-bind (d e) (parse-entry-date "2010-8-4")
    (is (equal "2010-08-04" (string-form d)))
    (is (not e)))
  (multiple-value-bind (d e) (parse-entry-date "    2010-8-4")
    (is (equal "2010-08-04" (string-form d)))
    (is (not e)))
  (multiple-value-bind (d e) (parse-entry-date "2010-8-4   ")
    (is (equal "2010-08-04" (string-form d)))
    (is (not e)))
  (multiple-value-bind (d e) (parse-entry-date "    2010-8-4   ")
    (is (equal "2010-08-04" (string-form d)))
    (is (not e)))
  (multiple-value-bind (d e) (parse-entry-date "2010-8-14=2010-9-1")
    (is (equal "2010-08-14" (string-form d)))
    (is (equal "2010-09-01" (string-form e))))
  (multiple-value-bind (d e) (parse-entry-date "    2010-8-14=2010-9-1")
    (is (equal "2010-08-14" (string-form d)))
    (is (equal "2010-09-01" (string-form e))))
  (multiple-value-bind (d e) (parse-entry-date "2010-8-14=2010-9-1    ")
    (is (equal "2010-08-14" (string-form d)))
    (is (equal "2010-09-01" (string-form e))))
  (multiple-value-bind (d e) (parse-entry-date "    2010-8-14=2010-9-1    ")
    (is (equal "2010-08-14" (string-form d)))
    (is (equal "2010-09-01" (string-form e))))
  )

(test parse-transaction
  (is (equal '("Liabilities:Due to/from Karl" nil nil nil "") (get-as-list (parse-transaction "    Liabilities:Due to/from Karl"))))
  (is (equal '("Liabilities:Due to/from Karl" nil nil nil "") (get-as-list (parse-transaction "    Liabilities:Due to/from Karl      "))))
  (is (equal '("Liabilities:Due to/from Karl" nil nil nil "note")
	     (get-as-list (parse-transaction "    Liabilities:Due to/from Karl      ;note"))))
  (is (equal '("Liabilities:Due to/from Karl" (231.0 "$" nil "") nil nil "note") 
	     (get-as-list (parse-transaction "    Liabilities:Due to/from Karl    $231.00;note"))))
  (is (equal '("Liabilities:Due to/from Karl" (232.0 "$" nil "") nil nil "note") 
	     (get-as-list (parse-transaction "    Liabilities:Due to/from Karl    $232.00    ;note"))))
  (is (equal '("Liabilities:Due to/from Karl" nil nil nil "note")
	     (get-as-list (parse-transaction "    Liabilities:Due to/from Karl    ;note"))))
  (is (equal '("Liabilities:Due to/from Karl" nil t nil "") (get-as-list (parse-transaction "    * Liabilities:Due to/from Karl      "))))
  (is (equal '("Liabilities:Due to/from Karl" nil nil t "") (get-as-list (parse-transaction "    ! Liabilities:Due to/from Karl      "))))
  (is (equal '("Liabilities:Due to/from Karl" nil t t "") (get-as-list (parse-transaction "    *! Liabilities:Due to/from Karl      "))))
  (is (equal '("Liabilities:Due to/from Karl" nil t t "") (get-as-list (parse-transaction "    !* Liabilities:Due to/from Karl      "))))
  (is (equal '("Liabilities:Due to/from Karl" nil t t "") (get-as-list (parse-transaction "    *!Liabilities:Due to/from Karl      "))))
  (is (equal '("Assets:Cash" nil nil nil "") (get-as-list (parse-transaction "    Assets:Cash"))))
  (is (equal '("Assets:Cash" nil nil nil "") (get-as-list (parse-transaction "Assets:Cash"))))
  (is (equal '("Assets:Cash" nil t nil "") (get-as-list (parse-transaction "*Assets:Cash"))))
  )

(test parse-entry-line
  (is (equal (list "2010-02-07" "2010-02-14" 
		   "Description of transaction (with parens) and * and ! and 1976/11/29 for confusion."
		   t t "code" nil)
	     (get-as-list 
	      (parse-entry-line "2010/2/7=2010/2/14 *! (code) Description of transaction (with parens) and * and ! and 1976/11/29 for confusion."))))
  (is (equal (list "2010-02-07" "2010-02-14" 
		   "Description of transaction."
		   t t "code" nil)
	     (get-as-list 
	      (parse-entry-line "2010/2/7=2010/2/14 *! (code) Description of transaction."))))

  (let ((p (parse-entry-line "2010/2/7=2010/2/14 *! (code)Description of transaction.")))
    (is (equal T (cleared p)))
    (is (equal T (pending p)))
    (is (equal "code" (code p)))
    (is (equal "Description of transaction." (desc p))))
  (let ((p (parse-entry-line "2010/2/7=2010/2/14 *!(code)Description of transaction.")))
    (is (equal T (cleared p)))
    (is (equal T (pending p)))
    (is (equal "code" (code p)))
    (is (equal "Description of transaction." (desc p))))
  (let ((p (parse-entry-line "2010/2/7=2010/2/14 (code)Description of transaction.")))
    (is (equal nil (cleared p)))
    (is (equal nil (pending p)))
    (is (equal "code" (code p)))
    (is (equal "Description of transaction." (desc p))))
  (let ((p (parse-entry-line "2010/2/7=2010/2/14 *! Description of transaction (with parens). ")))
    (is (equal T (cleared p)))
    (is (equal T (pending p)))
    (is (equal "2010-02-07" (string-form (date p))))
    (is (equal "2010-02-14" (string-form (effective-date p))))
    (is (equal nil (code p)))
    (is (equal "Description of transaction (with parens). " (desc p))))
  (let ((p (parse-entry-line "2010/2/7=2010/2/14 (code) Description of transaction (with parens). ")))
    (is (equal nil (cleared p)))
    (is (equal nil (pending p)))
    (is (equal "2010-02-07" (string-form (date p))))
    (is (equal "2010-02-14" (string-form (effective-date p))))
    (is (equal "code" (code p)))
    (is (equal "Description of transaction (with parens). " (desc p))))
  (let ((p (parse-entry-line "2010/2/7=2010/2/14 * (code) Description of transaction (with parens). ")))
    (is (equal "code" (code p)))
    (is (equal T (cleared p)))
    (is (equal nil (pending p))))
  (let ((p (parse-entry-line "2010/2/7=2010/2/14 ! (code) Description of transaction (with parens). ")))
    (is (equal "code" (code p)))
    (is (equal nil (cleared p)))
    (is (equal T (pending p))))
  (let ((p (parse-entry-line "2010/2/7=2010/2/14 * Description of transaction (with parens). ")))
    (is (equal nil (code p)))
    (is (equal T (cleared p)))
    (is (equal nil (pending p))))
  (let ((p (parse-entry-line "2010/2/7=2010/2/14 ! Description of transaction (with parens). ")))
    (is (equal nil (code p)))
    (is (equal nil (cleared p)))
    (is (equal T (pending p))))
  (let ((p (parse-entry-line "2010/2/7 *! Description of transaction (with parens).")))
    (is (equal T (cleared p)))
    (is (equal T (pending p)))
    (is (equal "2010-02-07" (string-form (date p))))
    (is (equal nil (effective-date p)))
    (is (equal nil (code p)))
    (is (equal "Description of transaction (with parens)." (desc p))))
  (let ((p (parse-entry-line "2/7 *! Description of transaction (with parens).")))
    (is (equal "02-07" (string-form (date p))))
    (is (equal nil (effective-date p))))
  )


(def-suite parse-amount :description "Test the parse-amount routines" :in parser)
(in-suite parse-amount)
(test parse-amount-currency
  (is (equal '(50 "$") (multiple-value-list (parse-amount-currency "$50"))))
  (is (equal '(13502.91 "$") (multiple-value-list (parse-amount-currency "$13,502.91"))))
  (is (equal '(13502.91 "$") (multiple-value-list (parse-amount-currency "  $13,502.91"))))
  (is (equal '(13502.91 "$") (multiple-value-list (parse-amount-currency "$13,502.91  "))))
  (is (equal '(13502.91 "$") (multiple-value-list (parse-amount-currency "  $13,502.91  "))))
  (is (equal '(13502.91 "$") (multiple-value-list (parse-amount-currency "$ 13,502.91"))))
  (is (equal '(13502.91 "$") (multiple-value-list (parse-amount-currency "$         13,502.91"))))
  (is (equal '(13502.91 "$") (multiple-value-list (parse-amount-currency "  $    13,502.91    "))))

  (is (equal '(13502.91 "") (multiple-value-list (parse-amount-currency "13,502.91"))))
  (is (equal '(13502.91 "") (multiple-value-list (parse-amount-currency "  13,502.91"))))
  (is (equal '(13502.91 "") (multiple-value-list (parse-amount-currency "13,502.91  "))))
  (is (equal '(13502.91 "") (multiple-value-list (parse-amount-currency "  13,502.91  "))))
  (is (equal '(13502.91 "") (multiple-value-list (parse-amount-currency " 13,502.91"))))
  (is (equal '(13502.91 "") (multiple-value-list (parse-amount-currency "         13,502.91"))))
  (is (equal '(13502.91 "") (multiple-value-list (parse-amount-currency "      13,502.91    "))))

  (is (equal '(13502.91 "HKD") (multiple-value-list (parse-amount-currency "13,502.91 HKD"))))
  (is (equal '(13502.91 "HKD") (multiple-value-list (parse-amount-currency "  13,502.91 HKD"))))
  (is (equal '(13502.91 "HKD") (multiple-value-list (parse-amount-currency "13,502.91  HKD  "))))
  (is (equal '(13502.91 "HKD") (multiple-value-list (parse-amount-currency "  13,502.91  HKD  "))))
  (is (equal '(13502.91 "HKD") (multiple-value-list (parse-amount-currency " 13,502.91 HKD"))))
  (is (equal '(13502.91 "HKD") (multiple-value-list (parse-amount-currency "         13,502.91 HKD"))))
  (is (equal '(13502.91 "HKD") (multiple-value-list (parse-amount-currency "      13,502.91    HKD"))))

  (is (equal '(0 "$") (multiple-value-list (parse-amount-currency "$"))))
  )

(test parse-amount
  (is (equal '(13502.91 "$" NIL "") (get-as-list (parse-amount "$13,502.91"))))
  (is (equal '(13502.91 "$" NIL "") (get-as-list (parse-amount "  $13,502.91"))))
  (is (equal '(13502.91 "$" NIL "") (get-as-list (parse-amount "$13,502.91  "))))
  (is (equal '(13502.91 "$" NIL "") (get-as-list (parse-amount "  $13,502.91  "))))
  (is (equal '(13502.91 "$" NIL "") (get-as-list (parse-amount "$ 13,502.91"))))
  (is (equal '(13502.91 "$" NIL "") (get-as-list (parse-amount "$         13,502.91"))))
  (is (equal '(13502.91 "$" NIL "") (get-as-list (parse-amount "  $    13,502.91    "))))

  (is (equal '(13502.91 "" NIL "") (get-as-list (parse-amount "13,502.91"))))
  (is (equal '(13502.91 "" NIL "") (get-as-list (parse-amount "  13,502.91"))))
  (is (equal '(13502.91 "" NIL "") (get-as-list (parse-amount "13,502.91  "))))
  (is (equal '(13502.91 "" NIL "") (get-as-list (parse-amount "  13,502.91  "))))
  (is (equal '(13502.91 "" NIL "") (get-as-list (parse-amount " 13,502.91"))))
  (is (equal '(13502.91 "" NIL "") (get-as-list (parse-amount "         13,502.91"))))
  (is (equal '(13502.91 "" NIL "") (get-as-list (parse-amount "      13,502.91    "))))

  (is (equal '(13502.91 "HKD" NIL "") (get-as-list (parse-amount "13,502.91 HKD"))))
  (is (equal '(13502.91 "HKD" NIL "") (get-as-list (parse-amount "  13,502.91 HKD"))))
  (is (equal '(13502.91 "HKD" NIL "") (get-as-list (parse-amount "13,502.91  HKD  "))))
  (is (equal '(13502.91 "HKD" NIL "") (get-as-list (parse-amount "  13,502.91  HKD  "))))
  (is (equal '(13502.91 "HKD" NIL "") (get-as-list (parse-amount " 13,502.91 HKD"))))
  (is (equal '(13502.91 "HKD" NIL "") (get-as-list (parse-amount "         13,502.91 HKD"))))
  (is (equal '(13502.91 "HKD" NIL "") (get-as-list (parse-amount "      13,502.91    HKD"))))

  (is (equal '(0 "$" NIL "") (get-as-list (parse-amount "$"))))

  (is (equal '(30.0 "$" 50 "AAPL") (get-as-list (parse-amount "50 AAPL @ $30.00"))))
  (is (equal '(30.0 "$" 50.5 "AAPL") (get-as-list (parse-amount "50.5    AAPL    @ $30.00"))))
  (is (equal '(30.0 "$" 50 "AAPL") (get-as-list (parse-amount "50 AAPL @@ $1500.00"))))
  (is (equal '( 30.0 "$" 50 "AAPL")
	     (get-as-list (parse-amount "  50    AAPL    @@ $1500.00  "))))

  (is (equal '(30.0 "$" 50 "AAPL") (get-as-list (parse-amount "50 AAPL @ $30.00  x"))))
  (is (equal '(30.0 "$" 50 "AAPL") (get-as-list (parse-amount "50 AAPL @ $30.00  ."))))
  (is (equal '(135.2 "$" NIL "") (get-as-list (parse-amount "$135.20  ."))))
  )

(defun test-all ()
  (setf *break-on-signals* nil)
  (run! 'sassetti-test)
  (setf *break-on-signals* 'error)
  "done")
;(test-all)
(defun run-test (tst)
  (setf *break-on-signals* nil)
  (run! tst)
  (setf *break-on-signals* 'error)
  "done")
