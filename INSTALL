# Quick Start

## Installing Sassetti

First, put all the files in the Sassetti distribution (e.g. this directory)
in a convenient place (e.g. ~/src/lisp/sassetti).  

Second, you need to tell your lisp install where that place is.
Sassetti relies on Zach Beane's Quicklisp system for loading
dependencies, so link sassetti.asd to some place Quicklisp can find
it.  On my box, I do:

    ln -s ~/src/list/sassetti/sassetti.asd ~/quicklisp/quicklisp/

If you want the test suite, make a symlink for the tests too:

    ln -s ~/src/list/sassetti/sassetti-test.asd ~/quicklisp/quicklisp/

Now you can [run Sassetti](#running_sassetti) from there or make an
executable version ("bin/sassetti") of Sassetti with `make bin`.  You
can also [install it systemwide](#installing_sassetti_systemwide) with
`make stow`.

## Dependencies

* *Ledger* does most of the actual work here.  Sassetti is just a
   wrapper that makes your data file lisp-capable.  When it's time to
   do most of the calculation, Sassetti passes a generated
   Ledger-format data file to Ledger.

* *QuickLisp* -  Zach Beane's tool for automatically downloading and
  installing lisp libraries is awesome.  Sassetti relies on QuickLisp
  to load dependencies (and itself), so make sure QuickLisp is loaded
  before sassetti, either automatically or manually.  QuickLisp will
  load cl-ppcre, iterate, split-sequence, and command-line-arguments.
  If you `make test`, QuickLisp will download FiveAm for testing.

* *GNU Make* is used to build the binary.

The documentation has some dependencies too.

* *Markdown* is used to format and style docs.

* *Pandoc* converts the markdown to different formats.

* *PDFLatex* generates pdf versions of the documentation.

* *GNU Make* processes /doc/Makefile.

## Building the Documentation

Documentation has been collected into a pdf that can be built using
`make doc`.  It also gets built into smaller files and other formats,
including one suitable for install as a man page.

<a name="installing_sassetti_systemwide" />

## Installing Sassetti Systemwide

The best way to install Sassetti at the system level is with [GNU
Stow](http://www.gnu.org/software/stow/).  This program puts packages
in individual directories and then adds symlinks to your system so all
the pieces are where GNU/Linux expects them to be.  And if you ever
want to upgrade or remove Sassetti, all you have to do is overwrite
the stow directory and tell stow to reset the symlinks.  Short of
making a distribution-specific package, GNU Stow is the most reliable
packaging tool around.  And it's extremely easy to use.

If you have stow installed and put your stow packages at
`/usr/local/stow`, just do `make; sudo make stow` and everything
should go right.

<a name="running_sassetti" />

## Running Sassetti 

You can run Sassetti from the commandline using `sassetti` and
`sassetti-test`, both of which are placed by make into the `/bin`
directory of your src distribution.

If you want to run Sassetti interactively, start your lisp environment
using `M-x slime` in emacs or `sbcl` at the commandline.  Then load
Sassetti with `(ql:quickload 'sassetti)`.  Once Sassetti is loaded,
you can invoke it or use any of its subroutines as in
`(sassetti:sassetti)`.

I haven't yet tested Sassetti with lisp compilers or interpreters
other than sbcl.

